const fetch = require("node-fetch");
const parser = require('fast-xml-parser');
const xmlOptions = {
    attributeNamePrefix : "",
    attrNodeName: "attr",
    textNodeName : "#text",
    ignoreAttributes : false,
    ignoreNameSpace : false,
    allowBooleanAttributes : false,
    parseNodeValue : true,
    parseAttributeValue : false,
    trimValues: false,
    decodeHTMLchar: false,
    cdataTagName: "__cdata", //default is 'false'
    cdataPositionChar: "\\c",
};
function request(source, site, useragent) {
    return new Promise(
        function(resolve, reject) {
            let date = Date.now();
            switch (source) {
                case "reddit":
                    if (!site) reject({reason: "No subreddit supplied", message: "Couldn't do request because there wasn't a subreddit"});
                    function ExtractRedditUrl(body, tries) {
                        tries++;
                        let post = body[Math.floor(Math.random() *body.length)].data;
                        switch ((/(\.jpg|\.png|\.jpeg)$/ig).test(post.url)) {
                            case true:
                                try{
                                    let payload = {
                                        image: post.url, //string
                                        permalink: post.permalink, //string
                                        post_link: `https://reddit.com${post.permalink}`, //string
                                        subreddit: post.subreddit, //string
                                        subreddit_name_prefixed: post.subreddit_name_prefixed, //string
                                        author: post.author, //string
                                        uploaded_UTC: post.created_utc*1000, //number
                                        uploaded: post.created*1000, //number
                                        title: post.title, //string
                                        score: post.score, //number
                                        up_votes: post.ups, //number
                                        down_votes: post.downs, //number
                                        comments_num: post.num_comments, //number
                                        nsfw: post.over_18, //boolean
                                        tries: tries, //number
                                        time: `${((Date.now() - date) / 1000).toFixed(2)}s` //string
                                    };
                                    resolve(payload);
                                }catch(error){
                                    ExtractRedditUrl(body, tries);
                                }
                            break;
                            case false:
                                ExtractRedditUrl(body, tries);
                            break;
                            default:
                                switch (post.is_video) {
                                    case true:
                                        ExtractRedditUrl(body, tries);
                                    break;
                                    default:
                                        switch (post.media) {
                                            case null:
                                                ExtractRedditUrl(body, tries);
                                            break;
                                        }
                                    break;
                                }
                            break;
                        }
                    }
                    let sortBy = ["best", "new", "top", "hot"], filter = sortBy[Math.floor(Math.random() *sortBy.length)];
                    let url = `https://reddit.com/r/${site}/${filter}.json?limit=100`;
                    fetch(url).then(async response => {
                        try {
                            let body = await response.json();
                            if (response.status !== 200) reject(body);
                            ExtractRedditUrl(body.data.children, 0);
                        } catch (error) {
                            reject(error);
                        }
                    }).catch(error => {
                        reject(error);
                    });
                break;
                case "konachan":
                    if (!site) reject({reason: "No url supplied", message: "Couldn't do request because there wasn't a url"});
                    fetch(site).then(async response => {
                        try {
                            let body = await response.text();
                            if (response.status !== 200) reject(response);
                            let posts = null
                            try {
                                posts = (body.match(/{".*?(?=})[}]/g));
                            } catch (error) {
                                reject({reason: "failed to match posts", message: "Wasn't able to correctly match posts"});
                            }
                            if (posts.length < 1) reject({reason: "no posts", message: "Failed to find a suitable post, posts.length < 1"});
                            let post = posts[Math.floor(Math.random() * posts.length)];
                            let payload = {
                                from: "konachan",
                                post: JSON.parse(post)
                            };
                            resolve(payload);
                        } catch (error) {
                            console.log(error)
                            reject(error);
                        }
                    }).catch(error => {
                        reject(error);
                    });
                break;
                case "danbooru":
                    if (!site) reject({reason: "No url supplied", message: "Couldn't do request because there wasn't a url"});
                    fetch(site).then(async response => {
                        try {
                            let body = await response.text();
                            if (response.status !== 200) reject(response);
                            let posts = null
                            try {
                                posts = (body.match(/{".*?(?=})[}]/g));
                            } catch (error) {
                                reject({reason: "failed to match posts", message: "Wasn't able to correctly match posts"});
                            }
                            if (posts.length < 1) reject({reason: "no posts", message: "Failed to find a suitable post, posts.length < 1"});
                            let post = posts[Math.floor(Math.random() * posts.length)];
                            let payload = {
                                from: "danbooru",
                                post: JSON.parse(post)
                            };
                            resolve(payload);
                        } catch (error) {
                            console.log(error)
                            reject(error);
                        }
                    }).catch(error => {
                        reject(error);
                    });
                break;
                case "rule34":
                    if (!site) reject({reason: "No url supplied", message: "Couldn't do request because there wasn't a url"});
                    function ExtractUrl(posts) {
                        if(!posts){
                            let payload = {
                                failed: true
                            }
                            return resolve(payload)
                        }
                        let post = posts[Math.floor(Math.random() * posts.length)];
                        let payload = {
                            from: "rule34",
                            post: post.attr
                        };
                        resolve(payload);
                    }
                    fetch(site).then(async response => {
                        try {
                            let body = await response.text();
                            var jsonObj = parser.parse(body,xmlOptions);
                            if (response.status !== 200) reject(response);
                            ExtractUrl(jsonObj.posts.post);
                        } catch (error) {
                            reject(error);
                        }
                    }).catch(error => {
                        reject(error);
                    });
                break;
                case "e621":
                    if (!useragent) reject({reason: "No user-agent supplied", message: "Couldn't do request because there wasn't a user-agent"});
                    if (!site) reject({reason: "No url supplied", message: "Couldn't do request because there wasn't a url"});
                    fetch(site, { headers: { 'User-Agent': useragent }}).then(async response => {
                        try {
                            let body = await response.text();
                            if (response.status !== 200) reject(response);
                            let posts = null
                            try {
                                posts = (JSON.parse(body));
                            } catch (error) {
                                reject({reason: "failed to match posts", message: "Wasn't able to correctly match posts"});
                            }
                            if (posts.length < 1) reject({reason: "no posts", message: "Failed to find a suitable post, posts.length < 1"});
                            let post = posts.posts[Math.floor(Math.random() * posts.posts.length)];
                            let payload = {
                                from: "e621",
                                post: post
                            };
                            resolve(payload);
                        } catch (error) {
                            console.log(error)
                            reject(error);
                        }
                    }).catch(error => {
                        reject(error);
                    });
                break;
                case "yandere":
                    if (!site) reject({reason: "No url supplied", message: "Couldn't do request because there wasn't a url"});
                    fetch(site).then(async response => {
                        try {
                            let body = await response.text();
                            if (response.status !== 200) reject(response);
                            let posts = null
                            try {
                                posts = (body.match(/{".*?(?=})[}]/g));
                            } catch (error) {
                                reject({reason: "failed to match posts", message: "Wasn't able to correctly match posts"});
                            }
                            if (posts.length < 1) reject({reason: "no posts", message: "Failed to find a suitable post, posts.length < 1"});
                            let post = posts[Math.floor(Math.random() * posts.length)];
                            let payload = {
                                from: "yandere",
                                post: JSON.parse(post)
                            };
                            resolve(payload);
                        } catch (error) {
                            console.log(error)
                            reject(error);
                        }
                    }).catch(error => {
                        reject(error);
                    });
                break;
            }
        }
    ).catch(error => {
        console.log(error)
    });
}
module.exports.makeRequest = request;