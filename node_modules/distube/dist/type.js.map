{"version":3,"file":"type.js","sourceRoot":"","sources":["../src/type.ts"],"names":[],"mappings":"","sourcesContent":["import type ytdl from \"@distube/ytdl-core\";\nimport type { CustomPlugin, ExtractorPlugin, Queue, Song } from \"./struct\";\nimport type {\n  Guild,\n  GuildMember,\n  Interaction,\n  Message,\n  Snowflake,\n  StageChannel,\n  TextChannel,\n  User,\n  VoiceChannel,\n  VoiceState,\n} from \"discord.js\";\n\nexport type Filters = Record<string, string>;\n\nexport interface DisTubeOptions {\n  /** DisTube plugins.*/\n  plugins?: (CustomPlugin | ExtractorPlugin)[];\n  /** If `true`, {@link DisTube#event:playSong} will not be emitted when looping a song or next song is the same as the previous one */\n  emitNewSongOnly?: boolean;\n  /** Whether or not leaving voice channel when the queue finishes. */\n  leaveOnFinish?: boolean;\n  /** Whether or not leaving voice channel after using {@link DisTube#stop} function. */\n  leaveOnStop?: boolean;\n  /** Whether or not leaving voice channel if the voice channel is empty after {@link DisTubeOptions}.emptyCooldown seconds. */\n  leaveOnEmpty?: boolean;\n  /** Built-in leave on empty cooldown in seconds (When leaveOnEmpty is true) */\n  emptyCooldown?: number;\n  /** Whether or not saving the previous songs of the queue and enable {@link DisTube#previous} method */\n  savePreviousSongs?: boolean;\n  /** Limit of search results emits in {@link DisTube#event:searchResult} event when {@link DisTube#play} method executed. If `searchSongs <= 1`, play the first result */\n  searchSongs?: number;\n  /** Built-in search cooldown in seconds (When `searchSongs` is bigger than 0) */\n  searchCooldown?: number;\n  /** YouTube cookies. Read how to get it in {@link https://github.com/fent/node-ytdl-core/blob/997efdd5dd9063363f6ef668bb364e83970756e7/example/cookies.js#L6-L12|YTDL's Example} */\n  youtubeCookie?: string;\n  /** If not given; ytdl-core will try to find it. You can find this by going to a video's watch page; viewing the source; and searching for \"ID_TOKEN\". */\n  youtubeIdentityToken?: string;\n  /** Whether or not using youtube-dl. */\n  youtubeDL?: boolean;\n  /** Whether or not updating youtube-dl automatically. */\n  updateYouTubeDL?: boolean;\n  /** Override {@link DefaultFilters} or add more ffmpeg filters. Example=`{ \"Filter name\"=\"Filter value\"; \"8d\"=\"apulsator=hz=0.075\" }` */\n  customFilters?: Filters;\n  /** `ytdl-core` options */\n  ytdlOptions?: ytdl.downloadOptions;\n  /** Whether or not playing age-restricted content and disabling safe search when using {@link DisTube#play} in non-NSFW channel. */\n  nsfw?: boolean;\n  /** Whether or not emitting `addList` event when creating a new Queue */\n  emitAddSongWhenCreatingQueue?: boolean;\n  /** Whether or not emitting `addSong` event when creating a new Queue */\n  emitAddListWhenCreatingQueue?: boolean;\n}\n\nexport type GuildIDResolvable =\n  | Queue\n  | Snowflake\n  | Message\n  | VoiceChannel\n  | StageChannel\n  | VoiceState\n  | Guild\n  | TextChannel\n  | GuildMember\n  | Interaction\n  | string;\n\nexport interface OtherSongInfo {\n  src?: string;\n  id?: string;\n  title?: string;\n  name?: string;\n  is_live?: boolean;\n  isLive?: boolean;\n  _duration_raw?: string | number;\n  duration?: string | number;\n  webpage_url?: string;\n  url: string;\n  thumbnail?: string;\n  related?: Song[];\n  view_count?: string | number;\n  views?: string | number;\n  like_count?: string | number;\n  likes?: string | number;\n  dislike_count?: string | number;\n  dislikes?: string | number;\n  repost_count?: string | number;\n  reposts?: string | number;\n  uploader?: string;\n  uploader_url?: string;\n  age_limit?: string | number;\n  chapters?: Chapter[];\n  age_restricted?: boolean;\n}\n\nexport interface Chapter {\n  /** Chapter title */\n  title: string;\n  /** Chapter start time in seconds */\n  start_time: number;\n}\n\nexport interface PlaylistInfo {\n  /** The source of the playlist */\n  source: string;\n  /**\n   * User requested.\n   */\n  member?: GuildMember;\n  /**\n   * User requested.\n   */\n  user?: User;\n  /** Playlist songs. */\n  songs: Song[];\n  /**\n   * Playlist name.\n   */\n  name?: string;\n  /**\n   * Playlist URL.\n   */\n  url?: string;\n  /**\n   * Playlist thumbnail.\n   */\n  thumbnail?: string;\n}\n"]}