{"version":3,"file":"DisTubeStream.js","sourceRoot":"","sources":["../../src/core/DisTubeStream.ts"],"names":[],"mappings":"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","sourcesContent":["import { isURL } from \"..\";\nimport { FFmpeg } from \"prism-media\";\nimport { DisTubeError } from \"../struct\";\nimport { StreamType } from \"@discordjs/voice\";\nimport type ytdl from \"@distube/ytdl-core\";\n\ninterface StreamOptions extends ytdl.downloadOptions {\n  /**\n   * Time to seek in seconds\n   */\n  seek?: number;\n  /**\n   * Additional FFmpeg arguments\n   */\n  ffmpegArgs?: string[];\n  /**\n   * If the stream url is live\n   */\n  isLive?: boolean;\n}\n\nexport const chooseBestVideoFormat = (formats: ytdl.videoFormat[], isLive = false) => {\n  let filter = (format: ytdl.videoFormat) => (format.audioBitrate ? format.audioBitrate > 0 : false);\n  if (isLive) {\n    filter = (format: ytdl.videoFormat) => (format.audioBitrate ? format.audioBitrate > 0 : false) && format.isHLS;\n  }\n  formats = formats.filter(filter).sort((a, b) => Number(b.audioBitrate) - Number(a.audioBitrate));\n  return formats.find(format => !format.bitrate) || formats[0];\n};\n\n// Use ffmpeg libopus codec\n// function libopusSupport(): boolean {\n//   try {\n//     return FFmpeg.getInfo().output.includes(\"--enable-libopus\");\n//   } catch { }\n//   return false;\n// }\n\n// const supportOggOpus = libopusSupport();\n\n/**\n * Create a stream to play with {@link DisTubeVoice}\n * @private\n */\nexport class DisTubeStream {\n  /**\n   * Create a stream from ytdl video formats\n   * @param {ytdl.videoFormat[]} formats ytdl video formats\n   * @param {StreamOptions} options options\n   * @returns {*}\n   */\n  static YouTube(formats: ytdl.videoFormat[] | undefined, options: StreamOptions = {}): DisTubeStream {\n    if (!formats || !formats.length) throw new DisTubeError(\"UNAVAILABLE_VIDEO\");\n    if (!options || typeof options !== \"object\" || Array.isArray(options)) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"object\", options, \"options\");\n    }\n    const bestFormat = chooseBestVideoFormat(formats, options.isLive);\n    if (!bestFormat) throw new DisTubeError(\"UNPLAYABLE_FORMATS\");\n    return new DisTubeStream(bestFormat.url, options);\n  }\n  /**\n   * Create a stream from a stream url\n   * @param {string} url stream url\n   * @param {StreamOptions} options options\n   * @returns {Readable|string}\n   */\n  static DirectLink(url: string, options: StreamOptions = {}): DisTubeStream {\n    if (!options || typeof options !== \"object\" || Array.isArray(options)) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"object\", options, \"options\");\n    }\n    if (typeof url !== \"string\" || !isURL(url)) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"an URL\", url);\n    }\n    return new DisTubeStream(url, options);\n  }\n  type: StreamType.Raw;\n  stream: FFmpeg;\n  url: string;\n  /**\n   * Create a DisTubeStream to play with {@link DisTubeVoice}\n   * @param {string} url Stream URL\n   * @param {StreamOptions} options Stream options\n   */\n  constructor(url: string, options: StreamOptions) {\n    this.url = url;\n    const args = [\n      \"-reconnect\",\n      \"1\",\n      \"-reconnect_streamed\",\n      \"1\",\n      \"-reconnect_delay_max\",\n      \"5\",\n      \"-i\",\n      url,\n      \"-analyzeduration\",\n      \"0\",\n      \"-loglevel\",\n      \"0\",\n      \"-ar\",\n      \"48000\",\n      \"-ac\",\n      \"2\",\n    ];\n    // Use ffmpeg libopus codec\n    // if (supportOggOpus) {\n    //   args.push(\"-acodec\", \"libopus\", \"-f\", \"opus\");\n    //   this.type = StreamType.OggOpus;\n    // } else {\n    args.push(\"-f\", \"s16le\");\n    this.type = StreamType.Raw;\n    // }\n    if (typeof options.seek === \"number\" && options.seek > 0) {\n      args.push(\"-ss\", options.seek.toString());\n    }\n    if (Array.isArray(options.ffmpegArgs)) {\n      args.push(...options.ffmpegArgs);\n    }\n    this.stream = new FFmpeg({ args, shell: false });\n  }\n}\n\nexport default DisTubeStream;\n"]}